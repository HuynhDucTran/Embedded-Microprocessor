-- Nguyen Kiem Hung
-- cpu : the top level entity

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.std_logic_arith.all;
use work.sys_definition.all;

-- 
entity cpu is
   Generic (
    DATA_WIDTH : integer   := 16;     -- Data Width
    ADDR_WIDTH : integer   := 16      -- Address width
    );
   port ( nReset   : in STD_LOGIC; -- low active reset signal
    	  -- start : in STD_LOGIC;    -- high active Start: enable cpu
          clk   : in STD_LOGIC;    -- Clock
          
	       -- Addr_out : out STD_LOGIC_VECTOR (ADDR_WIDTH-1 downto 0);
	       -- IR_in : in STD_LOGIC_VECTOR (DATA_WIDTH-1 downto 0);
	       -- ALU_out : out STD_LOGIC_VECTOR (DATA_WIDTH-1 downto 0);
     	   
     	   -- control signals for accessing to memory
     	   Mre, Mwe : out std_logic
     	    -- add ports as required here
           ALUz  : in std_logic; -- alu flags
           RFs    : out std_logic_vector(1 downto 0); -- register file selected.
           ALUs : out std_logic_vector(1 downto 0); --
           Ms : out std_logic_vector(1 downto 0);
           IRLd : out std_logic;
  
           RFwa : out std_logic_vector(3 downto 0);-- RFwe is Mwe
           RFwe : out std_logic;
           OPR1a : out std_logic_vector(3 downto 0);
           OPR1e : out std_logic;
           OPR2a : out std_logic_vector(3 downto 0);
           OPR2e : out std_logic;
  
          -- pc control
          PCClr : out std_logic;
          PCinc : out std_logic;
          PCLd : out std_logic;
  
          opcode : in std_logic_vector(15 downto 12); -- bits: 15 14 13 12 ==> opcode
          check_over_instruction : out std_logic
        );
end cpu;


architecture struc of cpu is

-- declare internal signals here
          -- Mov R0,3 => R0 = M(3) 0000 0000 0000 0011  
          signal IR_in : STD_LOGIC_VECTOR (DATA_WIDTH-1 downto 0) := X"0003"; 
	       -- ALU_out : out STD_LOGIC_VECTOR (DATA_WIDTH-1 downto 0);
     	   
     	   -- control signals for accessing to memory
     	   signal Mre, Mwe :  std_logic
     	    -- add ports as required here
           signal ALUz  : std_logic; -- alu flags
           signal RFs    :  std_logic_vector(1 downto 0); -- register file selected.
           signal ALUs :  std_logic_vector(1 downto 0); --
           signal Ms :  std_logic_vector(1 downto 0);
           signal IRLd :  std_logic;
  
           signal RFwa :  std_logic_vector(3 downto 0);-- RFwe is Mwe
           signal RFwe :  std_logic;
           signal OPR1a :  std_logic_vector(3 downto 0);
           signal OPR1e :  std_logic;
           signal OPR2a :  std_logic_vector(3 downto 0);
           signal OPR2e :  std_logic;
  
          -- pc control
          PCClr :  std_logic;
          PCinc :  std_logic;
          PCLd :  std_logic;
  
          opcode : std_logic_vector(15 downto 12); -- bits: 15 14 13 12 ==> opcode
           check_over_instruction :  std_logic


begin

-- write your code here

  --ctrl_U: controller port map(?);
  
  --Dp_U: datapath port map(?);

  --Mem_U: dpmem port map (?);

							

end struc;




